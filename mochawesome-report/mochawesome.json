{
  "stats": {
    "suites": 3,
    "tests": 34,
    "passes": 34,
    "pending": 0,
    "failures": 0,
    "start": "2018-04-09T05:28:31.441Z",
    "end": "2018-04-09T05:28:33.698Z",
    "duration": 2257,
    "testsRegistered": 34,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "1270371f-dec7-4cc9-bc1b-2b8b9845b671",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "717dfe9c-6c1d-42ae-943f-87c19c333379",
        "title": "测试案例",
        "fullFile": "/Users/penn/Desktop/clts/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "测试案例 \"before all\" hook",
            "timedOut": false,
            "duration": 1208,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var con = _mysql2.default.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'tcltcl'\n});\nawait con.connect();\nawait con.query('DROP DATABASE cltp');\nawait con.query('CREATE DATABASE cltp CHARACTER SET utf8 COLLATE utf8_general_ci');\nvar data = await readFile(__dirname + '/../tools/initDataScript.sql');\nvar scriptArr = data.split(';');\nawait _Model.sequelize.sync({ force: true });\nfor (var i = 0; i < scriptArr.length; i++) {\n  if (scriptArr[i].trim().length > 0) {\n    var r = await _Model.sequelize.query(scriptArr[i], null, { raw: true, type: 'INSERT' });\n  }\n}\n// 创建View\nvar viewSql = await readFile(__dirname + '/../tools/dbViewScript.sql', 'utf8');\nawait _Model.sequelize.query(viewSql, {\n  type: _Model.sequelize.QueryTypes.SELECT\n});\n// end 创建View\n// 创建Procedure\nvar procedureSql = await readFile(__dirname + '/../tools/dbProcedureScript.sql');\nvar procedureSql1 = replaceAll(procedureSql, '_DDStatus\\\\.DSP_', _Model.DDStatus.DSP);\nvar procedureSql2 = replaceAll(procedureSql1, '__DDStatus\\\\.YSP_', _Model.DDStatus.YSP);\nawait _Model.sequelize.query(procedureSql2, {\n  type: _Model.sequelize.QueryTypes.SELECT\n});\n// end 创建创建Procedure\nadminToken = await getToken('admin', '1');\nPPJLToken = await getToken('PPJL1', '1');\nKFJLToken = await getToken('KFJL1', '1');\nGZToken = await getToken('GZ1', '1');\nGTBAToken = await getToken('GTBA1', '1');\nGYSGLYToken = await getToken('GYSGLY1', '1');\nAZGSGLYToken = await getToken('AZGSGLY1', '1');\nZHYToken = await getToken('ZHY1', '1');\nAZGToken = await getToken('AZG1', '1');",
            "err": {},
            "isRoot": false,
            "uuid": "9b2268f9-7905-437f-9f15-8a331030afde",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "64c7a660-632b-419d-8cf2-099b56b76526",
            "title": "test",
            "fullFile": "/Users/penn/Desktop/clts/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "small test",
                "fullTitle": "测试案例 test small test",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.equal(1, 1);",
                "err": {},
                "isRoot": false,
                "uuid": "f02f6b0d-4680-42b8-b214-5e701c479cca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "temp test",
                "fullTitle": "测试案例 test temp test",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var r = await get('DW', {\n  keyword: 'DW'\n}, PPJLToken);\n_chai.assert.equal(1, 1);",
                "err": {},
                "isRoot": false,
                "uuid": "f08b86ca-9531-4237-8e2e-cc07d21e017d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "admin 创建 PP",
                "fullTitle": "测试案例 test admin 创建 PP",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var name = 'T_PP1';\nawait post('PP', {\n  name: name\n}, adminToken);\nvar r = await _Model.PP.findOne({ where: { name: name } });\n_chai.assert.notEqual(r, null);",
                "err": {},
                "isRoot": false,
                "uuid": "c96d9d5c-0d25-479c-a1f1-0b521023b02f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "admin 创建 PPJL",
                "fullTitle": "测试案例 test admin 创建 PPJL",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var PPId = 3;\nvar username = 'T_PPJL';\nvar password = '1';\nawait post('createPPJL', {\n  PPId: PPId,\n  username: username,\n  password: password\n}, adminToken);\nvar user = await _Model.User.findOne({ where: { username: username } });\n_chai.assert.notEqual(user, null);\nvar r = await _Model.PPJL_PP.findOne({ where: { PPId: PPId } });\n_chai.assert.notEqual(r.UserId, user.Id);",
                "err": {},
                "isRoot": false,
                "uuid": "4354acc1-237f-4ec3-8e92-9b20e24625cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "PPJL 创建 KFJL",
                "fullTitle": "测试案例 test PPJL 创建 KFJL",
                "timedOut": false,
                "duration": 67,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var tmpPPJLToken = await getToken('T_PPJL', '1');\nvar PPId = 3;\nvar username = 'T_KFJL';\nvar password = '1';\nawait post('createKFJL', {\n  PPId: PPId,\n  username: username,\n  password: password\n}, tmpPPJLToken);\nvar user = await _Model.User.findOne({ where: { username: username } });\n_chai.assert.notEqual(user, null);\nvar r = await _Model.KFJL_PP.findOne({ where: { PPId: PPId } });\n_chai.assert.notEqual(r.UserId, user.Id);",
                "err": {},
                "isRoot": false,
                "uuid": "b4a3c701-7e99-49be-9378-5312fb9ffe19",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 创建 GT, GTBA",
                "fullTitle": "测试案例 test KFJL 创建 GT, GTBA",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var PPId = 1;\nvar name = 'T_GT';\nvar code = 'T_GTCode';\nvar tmpQY = _Model.QY.EAST;\nvar tmpCS = '上海';\nawait post('createGT_GTBA', {\n  PPId: PPId,\n  name: name,\n  code: code,\n  QY: tmpQY,\n  CS: tmpCS\n}, KFJLToken);\nvar tmpGT = await _Model.GT.findOne({ where: { name: name } });\n_chai.assert.notEqual(tmpGT, null);\nvar tmpGTBA = await tmpGT.getGTBA();\n_chai.assert.equal(tmpGTBA.username, code);",
                "err": {},
                "isRoot": false,
                "uuid": "58315a65-b55c-4cac-b044-73d7bd371be4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 编辑 柜台图",
                "fullTitle": "测试案例 test KFJL 编辑 柜台图",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var name = 'T_GT';\nvar tmpGT = await _Model.GT.findOne({\n  where: {\n    name: name\n  }\n});\nvar id = tmpGT.id;\nvar imageUrl = 'T_imageUrl';\nawait post('setGT_IMAGE', {\n  id: id,\n  imageUrl: imageUrl\n}, KFJLToken);\nvar tmpGT2 = await _Model.GT.findOne({ where: { name: name } });\n_chai.assert.equal(tmpGT2.imageUrl, imageUrl);",
                "err": {},
                "isRoot": false,
                "uuid": "800e82bc-7ec0-49c4-8d98-38278b319a0e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 创建 GZ",
                "fullTitle": "测试案例 test KFJL 创建 GZ",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var PPId = 1;\nvar username = 'T_GZ';\nvar password = '1';\nawait post('createGZ', {\n  PPId: PPId,\n  username: username,\n  password: password\n}, KFJLToken);\nvar tmpUser = await _Model.User.findOne({ where: { username: username } });\n_chai.assert.equal(tmpUser.JS, _Model.JS.GZ);\nvar PPIds = await tmpUser.getGZPPs();\n_chai.assert.equal(PPIds[0].id, 1);",
                "err": {},
                "isRoot": false,
                "uuid": "7036a11b-3e22-4da6-a157-583d0b8cf243",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 配置 GZ 负责柜台",
                "fullTitle": "测试案例 test KFJL 配置 GZ 负责柜台",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var username = 'T_GZ';\nvar name = 'T_GT';\nvar GZUser = await _Model.User.findOne({ where: { username: username } });\nvar GZUserId = GZUser.id;\nvar tmpGT = await _Model.GT.findOne({ where: { name: name } });\nvar GTId = tmpGT.id;\nvar GTIds = [GTId];\nawait post('setGZ_GTs', {\n  GZUserId: GZUserId,\n  GTIds: GTIds\n}, KFJLToken);\nvar tmpGT2 = await _Model.GT.findOne({ where: { name: name } });\n_chai.assert.equal(tmpGT2.GZUserId, GZUserId);",
                "err": {},
                "isRoot": false,
                "uuid": "33f462c4-3aa0-44ca-bd91-ae953bcd993c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 创建 GYSGLY和GYS",
                "fullTitle": "测试案例 test KFJL 创建 GYSGLY和GYS",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var name = 'T_GYS';\nvar username = 'T_GYSGLY';\nvar password = '1';\nvar type = _Model.GYSType.SC;\nawait post('createGYSAndGLY', {\n  name: name,\n  username: username,\n  password: password,\n  type: type\n}, KFJLToken);\nvar tmpGYS = await _Model.GYS.findOne({ where: { name: name } });\n_chai.assert.notEqual(tmpGYS, null);\nvar tmpGLYs = await tmpGYS.getGLYs();\n_chai.assert.equal(tmpGLYs[0].username, username);",
                "err": {},
                "isRoot": false,
                "uuid": "73a09a53-5104-4d3c-b8bd-f852244f2934",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 创建 AZGSGLY和AZGS",
                "fullTitle": "测试案例 test KFJL 创建 AZGSGLY和AZGS",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var name = 'T_AZGS';\nvar username = 'T_AZGSGLY';\nvar password = '1';\nawait post('createAZGSAndGLY', {\n  name: name,\n  username: username,\n  password: password\n}, KFJLToken);\nvar tmpAZGS = await _Model.AZGS.findOne({ where: { name: name } });\n_chai.assert.notEqual(tmpAZGS, null);\nvar tmpAZGSs = await tmpAZGS.getGLYs();\n_chai.assert.equal(tmpAZGSs[0].username, username);",
                "err": {},
                "isRoot": false,
                "uuid": "16597856-d5f0-4781-80a2-d166b4d654cf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 创建 DW",
                "fullTitle": "测试案例 test KFJL 创建 DW",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var name = 'T_DW';\nvar GTId = 1;\nawait post('DW', {\n  name: name,\n  GTId: GTId\n}, KFJLToken);\nvar tmpDW = await _Model.DW.findOne({ where: { name: name } });\n_chai.assert.notEqual(tmpDW, null);\n_chai.assert.equal(tmpDW.GTId, GTId);",
                "err": {},
                "isRoot": false,
                "uuid": "fd31cf34-d8a2-436a-bca0-31064896bf76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 创建 DP",
                "fullTitle": "测试案例 test KFJL 创建 DP",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var name = 'T_DP';\nvar PPId = 1;\nvar GYSId = 1;\nawait post('DP', {\n  name: name,\n  PPId: PPId,\n  GYSId: GYSId\n}, KFJLToken);\nvar tmpDP = await _Model.DP.findOne({ where: { name: name } });\n_chai.assert.notEqual(tmpDP, null);\n_chai.assert.equal(tmpDP.PPId, PPId);\n_chai.assert.equal(tmpDP.GYSId, GYSId);",
                "err": {},
                "isRoot": false,
                "uuid": "1c7ac6a7-0872-41dc-b61f-8b93fa7e8159",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 编辑 DP图",
                "fullTitle": "测试案例 test KFJL 编辑 DP图",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var tmpDP = await _Model.DP.findOne({\n  where: {\n    name: 'T_DP'\n  }\n});\nvar id = tmpDP.id;\nvar imageUrl = 'T_imageUrl';\nawait put('DP/' + id, {\n  imageUrl: imageUrl,\n  PPId: 3\n}, KFJLToken);\nawait tmpDP.reload();\n_chai.assert.equal(tmpDP.imageUrl, 'T_imageUrl');\n_chai.assert.equal(tmpDP.PPId, 1);",
                "err": {},
                "isRoot": false,
                "uuid": "feab7785-d81c-4832-9185-a51cc0e05cb3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 配置 DP_DWs",
                "fullTitle": "测试案例 test KFJL 配置 DP_DWs",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var tmpDP = await _Model.DP.findOne({\n  where: {\n    name: 'T_DP'\n  }\n});\nvar id = tmpDP.id;\nvar DWIds = [11];\nawait post('setDP_DWs', {\n  id: id,\n  DWIds: DWIds\n}, KFJLToken);\nvar tmpDWs = await _Model.DW.findAll({\n  where: {\n    id: {\n      $in: DWIds\n    }\n  }\n});\nvar tmpDW_DP = tmpDWs.map(function (item) {\n  return item.DPId;\n});\n_chai.assert.deepEqual(tmpDW_DP, [id]);",
                "err": {},
                "isRoot": false,
                "uuid": "a092414e-ba5f-4280-9d77-fde395455a93",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 创建 WL",
                "fullTitle": "测试案例 test KFJL 创建 WL",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var name = 'T_WL3';\nvar code = 'T_WL3Code';\nvar level = 3;\nvar GYSId = 1;\nvar PPId = 1;\nawait post('WL', {\n  name: name,\n  code: code,\n  level: level,\n  PPId: PPId,\n  GYSId: GYSId\n}, KFJLToken);\nvar tmpWL = await _Model.WL.findOne({\n  where: {\n    name: name\n  }\n});\n_chai.assert.equal(tmpWL.code, code);\n_chai.assert.equal(tmpWL.level, level);\n_chai.assert.equal(tmpWL.GYSId, GYSId);",
                "err": {},
                "isRoot": false,
                "uuid": "43741256-1523-4bc1-89a3-42900e910162",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 编辑 WL图",
                "fullTitle": "测试案例 test KFJL 编辑 WL图",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var imageUrl = 'T_WL3_imageUrl';\nvar note = 'T_note';\nvar code = 'T_Code';\nvar tmpWL = await _Model.WL.findOne({\n  where: {\n    name: 'T_WL3'\n  }\n});\nawait put('WL/' + tmpWL.id, {\n  imageUrl: imageUrl,\n  note: note,\n  code: code\n}, KFJLToken);\nawait tmpWL.reload();\n_chai.assert.equal(tmpWL.imageUrl, imageUrl);\n_chai.assert.equal(tmpWL.note, note);\n_chai.assert.notEqual(tmpWL.code, code);",
                "err": {},
                "isRoot": false,
                "uuid": "5acdd51e-384d-47f6-8ccb-f6584d819a03",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 创建 FG, Tester, FGTester",
                "fullTitle": "测试案例 test KFJL 创建 FG, Tester, FGTester",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var PPId = 1;\nvar FGPayload = {\n  name: 'T_FG',\n  note: 'T_note',\n  Testers: ['Tester1', 'T_Tester1', 'T_Tester2']\n};\nawait post('createFG_Tester_FGTester', {\n  PPId: PPId,\n  FG: FGPayload\n}, KFJLToken);\nvar tmpFG = await _Model.FG.findOne({\n  where: {\n    name: FGPayload.name\n  }\n});\nvar Testers = await tmpFG.getTesters();\nvar TesterNames = Testers.map(function (item) {\n  return item.name;\n});\n_chai.assert.deepEqual(TesterNames, FGPayload.Testers);",
                "err": {},
                "isRoot": false,
                "uuid": "3e62a87f-9c60-41cb-a2bc-2f60049610c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 创建 EJZH",
                "fullTitle": "测试案例 test KFJL 创建 EJZH",
                "timedOut": false,
                "duration": 68,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var PPId = 1;\nvar name = 'T_EJZH';\nvar WLId = 7;\nvar imageUrl = 'T_imageUrl';\nvar XGTs = ['T_XGT1', 'T_XGT1'];\nvar FGTesters = [{\n  id: 1,\n  number: 2\n}, {\n  id: 2,\n  number: 3\n}];\nvar SJWLs = [{\n  id: 13,\n  number: 2\n}, {\n  id: 14,\n  number: 3\n}];\nawait post('createEJZH', {\n  PPId: PPId,\n  name: name,\n  WLId: WLId,\n  imageUrl: imageUrl,\n  XGTs: XGTs,\n  FGTesters: FGTesters,\n  SJWLs: SJWLs\n}, KFJLToken);\nvar tmpEJZH = await _Model.EJZH.findOne({\n  where: {\n    name: 'T_EJZH'\n  }\n});\n_chai.assert.equal(tmpEJZH.PPId, PPId);\n_chai.assert.equal(tmpEJZH.name, name);\n_chai.assert.equal(tmpEJZH.WLId, WLId);\n_chai.assert.equal(tmpEJZH.imageUrl, imageUrl);\nvar tmpXGTs = await tmpEJZH.getEJZHXGTs();\nvar tmpXGTImageUrls = tmpXGTs.map(function (item) {\n  return item.imageUrl;\n});\n_chai.assert.deepEqual(tmpXGTImageUrls, XGTs);\nvar tmpFGTesters = await tmpEJZH.getFGTesters();\nvar tmpFGTesterObjs = tmpFGTesters.map(function (item) {\n  return {\n    id: item.EJZH_FGTester.FGTesterId,\n    number: item.EJZH_FGTester.number\n  };\n});\n_chai.assert.deepEqual(tmpFGTesterObjs, FGTesters);\nvar tmpSJWLs = await tmpEJZH.getSJWLs();\nvar tmpSJWLObjs = tmpSJWLs.map(function (item) {\n  return {\n    id: item.EJZH_SJWL.WLId,\n    number: item.EJZH_SJWL.number\n  };\n});\n_chai.assert.deepEqual(tmpSJWLObjs, SJWLs);",
                "err": {},
                "isRoot": false,
                "uuid": "7646b0cb-5642-400c-8b42-63e22e0d562e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 编辑 EJZH",
                "fullTitle": "测试案例 test KFJL 编辑 EJZH",
                "timedOut": false,
                "duration": 68,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var name = 'T_EJZH';\nvar tmpEJZH0 = await _Model.EJZH.findOne({\n  where: {\n    name: name\n  }\n});\nvar id = tmpEJZH0.id;\nvar WLId = 8;\nvar imageUrl = 'T_imageUrl2';\nvar XGTs = ['T_XGT2', 'T_XGT2'];\nvar FGTesters = [{\n  id: 3,\n  number: 3\n}, {\n  id: 4,\n  number: 2\n}];\nvar SJWLs = [{\n  id: 15,\n  number: 3\n}, {\n  id: 16,\n  number: 2\n}];\nawait post('editEJZH', {\n  id: id,\n  WLId: WLId,\n  imageUrl: imageUrl,\n  XGTs: XGTs,\n  FGTesters: FGTesters,\n  SJWLs: SJWLs\n}, KFJLToken);\nvar tmpEJZH = await _Model.EJZH.findOne({\n  where: {\n    name: 'T_EJZH'\n  }\n});\n_chai.assert.equal(tmpEJZH.name, name);\n_chai.assert.equal(tmpEJZH.WLId, WLId);\n_chai.assert.equal(tmpEJZH.imageUrl, imageUrl);\nvar tmpXGTs = await tmpEJZH.getEJZHXGTs();\nvar tmpXGTImageUrls = tmpXGTs.map(function (item) {\n  return item.imageUrl;\n});\n_chai.assert.deepEqual(tmpXGTImageUrls, XGTs);\nvar tmpFGTesters = await tmpEJZH.getFGTesters();\nvar tmpFGTesterObjs = tmpFGTesters.map(function (item) {\n  return {\n    id: item.EJZH_FGTester.FGTesterId,\n    number: item.EJZH_FGTester.number\n  };\n});\n_chai.assert.deepEqual(tmpFGTesterObjs, FGTesters);\nvar tmpSJWLs = await tmpEJZH.getSJWLs();\nvar tmpSJWLObjs = tmpSJWLs.map(function (item) {\n  return {\n    id: item.EJZH_SJWL.WLId,\n    number: item.EJZH_SJWL.number\n  };\n});\n_chai.assert.deepEqual(tmpSJWLObjs, SJWLs);",
                "err": {},
                "isRoot": false,
                "uuid": "1e6f26cf-6fb3-44af-b218-694ca6014547",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 创建 YJZH",
                "fullTitle": "测试案例 test KFJL 创建 YJZH",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var PPId = 1;\nvar name = 'T_YJZH';\nvar WLId = 1;\nvar imageUrl = 'T_imageUrl';\nvar XGTs = ['T_XGT1', 'T_XGT1'];\nvar EJZHs = [{\n  id: 1,\n  number: 2\n}, {\n  id: 2,\n  number: 3\n}];\nawait post('createYJZH', {\n  PPId: PPId,\n  name: name,\n  WLId: WLId,\n  imageUrl: imageUrl,\n  XGTs: XGTs,\n  EJZHs: EJZHs\n}, KFJLToken);\nvar tmpYJZH = await _Model.YJZH.findOne({\n  where: {\n    name: 'T_YJZH'\n  }\n});\n_chai.assert.equal(tmpYJZH.PPId, PPId);\n_chai.assert.equal(tmpYJZH.name, name);\n_chai.assert.equal(tmpYJZH.WLId, WLId);\n_chai.assert.equal(tmpYJZH.imageUrl, imageUrl);\nvar tmpXGTs = await tmpYJZH.getYJZHXGTs();\nvar tmpXGTImageUrls = tmpXGTs.map(function (item) {\n  return item.imageUrl;\n});\n_chai.assert.deepEqual(tmpXGTImageUrls, XGTs);\nvar tmpEJZHs = await tmpYJZH.getEJZHs();\nvar tmpEJZHObjs = tmpEJZHs.map(function (item) {\n  return {\n    id: item.YJZH_EJZH.EJZHId,\n    number: item.YJZH_EJZH.number\n  };\n});\n_chai.assert.deepEqual(tmpEJZHObjs, EJZHs);",
                "err": {},
                "isRoot": false,
                "uuid": "075ff63e-5d32-41a3-a03a-82390997b03e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 编辑 YJZH",
                "fullTitle": "测试案例 test KFJL 编辑 YJZH",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var name = 'T_YJZH';\nvar tmpYJZH0 = await _Model.YJZH.findOne({\n  where: {\n    name: name\n  }\n});\nvar id = tmpYJZH0.id;\nvar WLId = 2;\nvar imageUrl = 'T_imageUrl2';\nvar XGTs = ['T_XGT2', 'T_XGT2'];\nvar EJZHs = [{\n  id: 2,\n  number: 3\n}, {\n  id: 3,\n  number: 2\n}];\nawait post('editYJZH', {\n  id: id,\n  WLId: WLId,\n  imageUrl: imageUrl,\n  XGTs: XGTs,\n  EJZHs: EJZHs\n}, KFJLToken);\nvar tmpYJZH = await _Model.YJZH.findOne({\n  where: {\n    name: 'T_YJZH'\n  }\n});\n_chai.assert.equal(tmpYJZH.name, name);\n_chai.assert.equal(tmpYJZH.WLId, WLId);\n_chai.assert.equal(tmpYJZH.imageUrl, imageUrl);\nvar tmpXGTs = await tmpYJZH.getYJZHXGTs();\nvar tmpXGTImageUrls = tmpXGTs.map(function (item) {\n  return item.imageUrl;\n});\n_chai.assert.deepEqual(tmpXGTImageUrls, XGTs);\nvar tmpEJZHs = await tmpYJZH.getEJZHs();\nvar tmpEJZHObjs = tmpEJZHs.map(function (item) {\n  return {\n    id: item.YJZH_EJZH.EJZHId,\n    number: item.YJZH_EJZH.number\n  };\n});\n_chai.assert.deepEqual(tmpEJZHObjs, EJZHs);",
                "err": {},
                "isRoot": false,
                "uuid": "8434acd8-b25a-41b7-81ff-6d1acd7adf5d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL 配置 YJZH_GTs",
                "fullTitle": "测试案例 test KFJL 配置 YJZH_GTs",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var YJZHName = 'T_YJZH';\nvar GTName = 'T_GT';\nvar tmpYJZH0 = await _Model.YJZH.findOne({\n  where: {\n    name: YJZHName\n  }\n});\nvar id = tmpYJZH0.id;\nvar tmpGT0 = await _Model.GT.findOne({\n  where: {\n    name: GTName\n  }\n});\nvar GTs = [{ id: tmpGT0.id, number: 3 }];\nawait post('setYJZH_GTs', {\n  id: id,\n  GTs: GTs\n}, KFJLToken);\nvar tmpYJZH = await _Model.YJZH.findOne({\n  where: {\n    name: 'T_YJZH'\n  }\n});\nvar tmpGTs = await tmpYJZH.getGTs();\nvar tmpGTObjs = tmpGTs.map(function (item) {\n  return { id: item.id, number: item.GT_YJZH.number };\n});\n_chai.assert.deepEqual(tmpGTObjs, GTs);",
                "err": {},
                "isRoot": false,
                "uuid": "ad2705ba-cd3e-4d16-bf25-6867dbba21bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL创建DD",
                "fullTitle": "测试案例 test KFJL创建DD",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var PPId = 1;\nvar name = 'T_DD';\nawait post('createDD', {\n  PPId: PPId,\n  name: name\n}, KFJLToken);\nvar tmpDD = await _Model.DD.findOne({\n  where: {\n    name: name\n  }\n});\n_chai.assert.notEqual(tmpDD, null);\n// todo: 检查相关snapshot和DD_GT_WL DD_DW_DP",
                "err": {},
                "isRoot": false,
                "uuid": "67c9853b-1aad-459e-aca3-1900026f6587",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL重置DD_GTFXs",
                "fullTitle": "测试案例 test KFJL重置DD_GTFXs",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var id = 1;\nvar GTIds = [1, 2];\nawait post('setDD_GTFXs', {\n  id: id,\n  GTIds: GTIds\n}, KFJLToken);\nvar tmpDD = await _Model.DD.findOne({\n  where: {\n    id: id\n  }\n});\nvar tmpGTs = await tmpDD.getFXGTs();\nvar tmpGTIds = tmpGTs.map(function (item) {\n  return item.id;\n});\n_chai.assert.deepEqual(tmpGTIds, GTIds);\n// todo: 检查相关snapshot和DD_GT_WL DD_DW_DP",
                "err": {},
                "isRoot": false,
                "uuid": "589e842e-63dc-48ba-b0ec-44ced9003912",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "KFJL重新生成DD",
                "fullTitle": "测试案例 test KFJL重新生成DD",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var DDId = 1;\nawait post('reCreateDD', {\n  DDId: DDId\n}, KFJLToken);\n_chai.assert.equal(1, 1);\n// todo: 检查相关snapshot和DD_GT_WL DD_DW_DP",
                "err": {},
                "isRoot": false,
                "uuid": "38b40f12-eff5-4b82-9ac5-bef4aa09d466",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "PPJL 批量设置订单柜台物料的安装公司",
                "fullTitle": "测试案例 test PPJL 批量设置订单柜台物料的安装公司",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var id = 1;\nvar DD_GT_WLIds = [128, 129];\nawait post('setDDGTWLs_AZGS', {\n  id: id,\n  DD_GT_WLIds: DD_GT_WLIds\n}, PPJLToken);\nvar tmpDD_GT_WLs = await _Model.DD_GT_WL.findAll({\n  where: {\n    id: {\n      $in: DD_GT_WLIds\n    }\n  }\n});\n_chai.assert.deepEqual([id, id], tmpDD_GT_WLs.map(function (item) {\n  return item.AZGSId;\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "16b394da-a61f-4d8a-9150-b4074a6712ec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "PPJL 批量设置订单灯位灯片的安装公司",
                "fullTitle": "测试案例 test PPJL 批量设置订单灯位灯片的安装公司",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var id = 1;\nvar DD_DW_DPIds = [16, 17];\nawait post('setDDDWDPs_AZGS', {\n  id: id,\n  DD_DW_DPIds: DD_DW_DPIds\n}, PPJLToken);\nvar tmpDD_DW_DPs = await _Model.DD_DW_DP.findAll({\n  where: {\n    id: {\n      $in: DD_DW_DPIds\n    }\n  }\n});\n_chai.assert.deepEqual([id, id], tmpDD_DW_DPs.map(function (item) {\n  return item.AZGSId;\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "0469d2f2-bdee-4807-93dc-7acccc5d315a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "PPJL审批通过DD",
                "fullTitle": "测试案例 test PPJL审批通过DD",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var id = 1;\nawait post('approveDD', {\n  id: id\n}, PPJLToken);\nvar tmpDD = await _Model.DD.findOne({\n  where: {\n    id: id\n  }\n});\n_chai.assert.equal(_Model.DDStatus.YSP, tmpDD.status);",
                "err": {},
                "isRoot": false,
                "uuid": "a9ddd2a1-a9b9-4622-89d0-53bbe958e9da",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "GYSGLY 批量设置订单柜台物料的发货供应商",
                "fullTitle": "测试案例 test GYSGLY 批量设置订单柜台物料的发货供应商",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var DD_GT_WLIds = [128, 129];\nvar GYSId = 6;\nawait post('setDDGTWLs_GYS', {\n  DD_GT_WLIds: DD_GT_WLIds,\n  GYSId: GYSId\n}, GYSGLYToken);\nvar tmpDD_GT_WLs = await _Model.DD_GT_WL.findAll({\n  where: {\n    id: {\n      $in: DD_GT_WLIds\n    }\n  }\n});\n_chai.assert.deepEqual([GYSId, GYSId], tmpDD_GT_WLs.map(function (item) {\n  return item.GYSId;\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "ed61aa67-ebdb-4cae-a84c-ce5bf63b6b90",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "GYSGLY 批量设置订单灯位灯片的发货供应商",
                "fullTitle": "测试案例 test GYSGLY 批量设置订单灯位灯片的发货供应商",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var DD_DW_DPIds = [16, 17];\nvar GYSId = 6;\nawait post('setDDDWDPs_GYS', {\n  DD_DW_DPIds: DD_DW_DPIds,\n  GYSId: GYSId\n}, GYSGLYToken);\nvar tmpDD_DW_DPs = await _Model.DD_DW_DP.findAll({\n  where: {\n    id: {\n      $in: DD_DW_DPIds\n    }\n  }\n});\n_chai.assert.deepEqual([GYSId, GYSId], tmpDD_DW_DPs.map(function (item) {\n  return item.GYSId;\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "a290396b-b798-4c53-a226-70cb6b32c202",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "AZGSGLY 批量设置DD_GT_WL安装工",
                "fullTitle": "测试案例 test AZGSGLY 批量设置DD_GT_WL安装工",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var DD_GT_WLIds = [128, 129];\nvar AZGUserId = 40;\nawait post('setDDGTWLs_AZG', {\n  DD_GT_WLIds: DD_GT_WLIds,\n  AZGUserId: AZGUserId\n}, AZGSGLYToken);\nvar tmpDD_GT_WLs = await _Model.DD_GT_WL.findAll({\n  where: {\n    id: {\n      $in: DD_GT_WLIds\n    }\n  }\n});\n_chai.assert.deepEqual([AZGUserId, AZGUserId], tmpDD_GT_WLs.map(function (item) {\n  return item.AZGUserId;\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "e9f8592d-c37f-4523-98ff-8433af8a5d50",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "AZGSGLY 批量设置DD_DW_DP安装工",
                "fullTitle": "测试案例 test AZGSGLY 批量设置DD_DW_DP安装工",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var DD_DW_DPIds = [16, 17];\nvar AZGUserId = 40;\nawait post('setDDDWDPs_AZG', {\n  DD_DW_DPIds: DD_DW_DPIds,\n  AZGUserId: AZGUserId\n}, AZGSGLYToken);\nvar tmpDD_DW_DPs = await _Model.DD_DW_DP.findAll({\n  where: {\n    id: {\n      $in: DD_DW_DPIds\n    }\n  }\n});\n_chai.assert.deepEqual([AZGUserId, AZGUserId], tmpDD_DW_DPs.map(function (item) {\n  return item.AZGUserId;\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "a910f785-4fca-445d-a4f1-826b247e37a8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f02f6b0d-4680-42b8-b214-5e701c479cca",
              "f08b86ca-9531-4237-8e2e-cc07d21e017d",
              "c96d9d5c-0d25-479c-a1f1-0b521023b02f",
              "4354acc1-237f-4ec3-8e92-9b20e24625cb",
              "b4a3c701-7e99-49be-9378-5312fb9ffe19",
              "58315a65-b55c-4cac-b044-73d7bd371be4",
              "800e82bc-7ec0-49c4-8d98-38278b319a0e",
              "7036a11b-3e22-4da6-a157-583d0b8cf243",
              "33f462c4-3aa0-44ca-bd91-ae953bcd993c",
              "73a09a53-5104-4d3c-b8bd-f852244f2934",
              "16597856-d5f0-4781-80a2-d166b4d654cf",
              "fd31cf34-d8a2-436a-bca0-31064896bf76",
              "1c7ac6a7-0872-41dc-b61f-8b93fa7e8159",
              "feab7785-d81c-4832-9185-a51cc0e05cb3",
              "a092414e-ba5f-4280-9d77-fde395455a93",
              "43741256-1523-4bc1-89a3-42900e910162",
              "5acdd51e-384d-47f6-8ccb-f6584d819a03",
              "3e62a87f-9c60-41cb-a2bc-2f60049610c2",
              "7646b0cb-5642-400c-8b42-63e22e0d562e",
              "1e6f26cf-6fb3-44af-b218-694ca6014547",
              "075ff63e-5d32-41a3-a03a-82390997b03e",
              "8434acd8-b25a-41b7-81ff-6d1acd7adf5d",
              "ad2705ba-cd3e-4d16-bf25-6867dbba21bb",
              "67c9853b-1aad-459e-aca3-1900026f6587",
              "589e842e-63dc-48ba-b0ec-44ced9003912",
              "38b40f12-eff5-4b82-9ac5-bef4aa09d466",
              "16b394da-a61f-4d8a-9150-b4074a6712ec",
              "0469d2f2-bdee-4807-93dc-7acccc5d315a",
              "a9ddd2a1-a9b9-4622-89d0-53bbe958e9da",
              "ed61aa67-ebdb-4cae-a84c-ce5bf63b6b90",
              "a290396b-b798-4c53-a226-70cb6b32c202",
              "e9f8592d-c37f-4523-98ff-8433af8a5d50",
              "a910f785-4fca-445d-a4f1-826b247e37a8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1001,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "168d5c8d-3096-4eba-95b2-886639a4cc29",
        "title": "test",
        "fullFile": "/Users/penn/Desktop/clts/test/test1.js",
        "file": "/test/test1.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "small test",
            "fullTitle": "test small test",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_chai.assert.equal(1, 1);",
            "err": {},
            "isRoot": false,
            "uuid": "f07bc112-abb2-45e4-a71d-9c1abaac1be1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f07bc112-abb2-45e4-a71d-9c1abaac1be1"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}